--- /dev/null
+++ SystemUIExt/res/values/dimens.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2013-2015 The MoKee OpenSource Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+
+    <!-- Network traffic monitor single-line text size -->
+    <dimen name="net_traffic_single_text_size">12dp</dimen>
+    <!-- Network traffic monitor multi-line text size -->
+    <dimen name="net_traffic_multi_text_size">9dp</dimen>
+
+</resources>
--- /dev/null
+++ SystemUIExt/res/values/styles.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2013-2015 The MoKee OpenSource Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+  
+          http://www.apache.org/licenses/LICENSE-2.0
+  
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<resources xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <style name="TextAppearance.StatusBar.NetworkTraffic" parent="TextAppearance.StatusBar.Clock" />
+
+</resources>
--- /dev/null
+++ SystemUIExt/src/com/android/systemui/statusbar/policy/NetworkTraffic.java
@@ -0,0 +1,318 @@
+/*
+ * Copyright (C) 2014-2015 The MoKee OpenSource Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.policy;
+
+import java.text.DecimalFormat;
+
+import android.content.BroadcastReceiver;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.res.Resources;
+import android.database.ContentObserver;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
+import android.net.TrafficStats;
+import android.net.Uri;
+import android.os.Handler;
+import android.os.Message;
+import android.os.SystemClock;
+import android.os.UserHandle;
+import android.provider.Settings;
+import android.text.Spannable;
+import android.text.SpannableString;
+import android.text.style.AbsoluteSizeSpan;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.util.TypedValue;
+import android.view.View;
+import android.widget.TextView;
+
+import com.android.systemui.R;
+import com.android.systemui.utils.NetworkTrafficSpan;
+
+/*
+ *
+ * Seeing how an Integer object in java requires at least 16 Bytes, it seemed awfully wasteful
+ * to only use it for a single boolean. 32-bits is plenty of room for what we need it to do.
+ *
+ */
+public class NetworkTraffic extends TextView {
+    public static final int MASK_UP = 0x00000001; // Least valuable bit
+    public static final int MASK_DOWN = 0x00000002; // Second least valuable bit
+    public static final int MASK_PERIOD = 0xFFFF0000; // Most valuable 16 bits
+
+    private static final int KILOBYTE = 1024;
+
+    private static DecimalFormat decimalFormat = new DecimalFormat("##0.#");
+    static {
+        decimalFormat.setMaximumIntegerDigits(4);
+        decimalFormat.setMaximumFractionDigits(1);
+    }
+
+    private int mState = 0;
+    private boolean mAttached;
+    private long totalRxBytes;
+    private long totalTxBytes;
+    private long lastUpdateTime;
+    private int txtSizeSingle;
+    private int txtSizeMulti;
+    private int KB = KILOBYTE;
+    private int MB = KB * KB;
+    private int GB = MB * KB;
+    private String mUp = " \u25B2";
+    private String mDown = " \u25BC";
+    private boolean shouldHide;
+
+    private Handler mTrafficHandler = new Handler() {
+        @Override
+        public void handleMessage(Message msg) {
+            long timeDelta = SystemClock.elapsedRealtime() - lastUpdateTime;
+
+            if (timeDelta < getInterval(mState) * .95) {
+                if (msg.what != 1) {
+                    // we just updated the view, nothing further to do
+                    return;
+                }
+                if (timeDelta < 1) {
+                    // Can't div by 0 so make sure the value displayed is minimal
+                    timeDelta = Long.MAX_VALUE;
+                }
+            }
+            lastUpdateTime = SystemClock.elapsedRealtime();
+
+            // Calculate the data rate from the change in total bytes and time
+            long newTotalRxBytes = TrafficStats.getTotalRxBytes();
+            long newTotalTxBytes = TrafficStats.getTotalTxBytes();
+            long rxData = newTotalRxBytes - totalRxBytes;
+            long txData = newTotalTxBytes - totalTxBytes;
+
+            // If bit/s convert from Bytes to bits
+            String symbol = "B/s";
+
+            // Get information for uplink ready so the line return can be added
+            String output = "";
+            if (isSet(mState, MASK_UP)) {
+                output = formatOutput(timeDelta, txData, symbol);
+                output += mUp;
+            }
+
+            // Ensure text size is where it needs to be
+            int textSize;
+            if (isSet(mState, MASK_UP + MASK_DOWN)) {
+                output += "\n";
+                textSize = txtSizeMulti;
+            } else {
+                textSize = txtSizeSingle;
+            }
+
+            // Add information for downlink if it's called for
+            if (isSet(mState, MASK_DOWN)) {
+                output += formatOutput(timeDelta, rxData, symbol);
+                output += mDown;
+            }
+
+            shouldHide = TextUtils.isEmpty(output.replaceAll("(?:0" + symbol + mUp + "|0" + symbol + mDown + "|\n)", ""));
+
+            // Update view if there's anything new to show
+            if (!output.contentEquals(getText()) && !shouldHide) {
+                if (textSize == txtSizeMulti) {
+                    int upIndex = output.indexOf(mUp);
+                    int downIndex = output.indexOf(mDown);
+                    int lineIndex = output.indexOf("\n");
+                    Spannable spannable = new SpannableString(output);
+                    spannable.setSpan(new AbsoluteSizeSpan(txtSizeMulti), 0, upIndex,
+                            Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
+                    spannable.setSpan((new NetworkTrafficSpan(-0.05)), 0, upIndex,
+                            Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
+                    spannable.setSpan(new AbsoluteSizeSpan((int) (txtSizeMulti * 0.7)), upIndex,
+                            lineIndex, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
+                    spannable.setSpan(new NetworkTrafficSpan(-0.4), upIndex, lineIndex,
+                            Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
+                    spannable.setSpan(new AbsoluteSizeSpan(txtSizeMulti), lineIndex, downIndex,
+                            Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
+                    spannable.setSpan((new NetworkTrafficSpan(0.05)), lineIndex, downIndex,
+                            Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
+                    spannable.setSpan(new AbsoluteSizeSpan((int) (txtSizeMulti * 0.7)), downIndex,
+                            output.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
+                    spannable.setSpan(new NetworkTrafficSpan(0.4), downIndex,
+                            output.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
+                    setText(spannable);
+                } else {
+                    int index = output.indexOf(isSet(mState, MASK_DOWN) ? mDown : mUp);
+                    Spannable spannable = new SpannableString(output);
+                    spannable.setSpan(new AbsoluteSizeSpan(txtSizeSingle), 0, index,
+                            Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
+                    spannable.setSpan(new AbsoluteSizeSpan((int) (txtSizeMulti * 0.9)), index,
+                            output.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
+                    spannable.setSpan(new NetworkTrafficSpan(0.25), index,
+                            output.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
+                    setText(spannable);
+                }
+            }
+            setVisibility(shouldHide ? View.GONE : View.VISIBLE);
+            // Post delayed message to refresh in ~1000ms
+            totalRxBytes = newTotalRxBytes;
+            totalTxBytes = newTotalTxBytes;
+            clearHandlerCallbacks();
+            mTrafficHandler.postDelayed(mRunnable, getInterval(mState));
+        }
+
+        private String formatOutput(long timeDelta, long data, String symbol) {
+            long speed = (long) (data / (timeDelta / 1000F));
+            if (speed < KB) {
+                return decimalFormat.format(speed) + symbol;
+            } else if (speed < MB) {
+                return decimalFormat.format(speed / (float) KB) + 'K' + symbol;
+            } else if (speed < GB) {
+                return decimalFormat.format(speed / (float) MB) + 'M' + symbol;
+            }
+            return decimalFormat.format(speed / (float) GB) + 'G' + symbol;
+        }
+    };
+
+    private Runnable mRunnable = new Runnable() {
+        @Override
+        public void run() {
+            mTrafficHandler.sendEmptyMessage(0);
+        }
+    };
+
+    class SettingsObserver extends ContentObserver {
+        SettingsObserver(Handler handler) {
+            super(handler);
+        }
+
+        void observe() {
+            ContentResolver resolver = mContext.getContentResolver();
+            Uri uri = Settings.System.getUriFor(Settings.System.STATUS_BAR_NETWORK_TRAFFIC_STYLE);
+            resolver.registerContentObserver(uri, false, this, UserHandle.USER_ALL);
+        }
+
+        /*
+         * @hide
+         */
+        @Override
+        public void onChange(boolean selfChange) {
+            updateSettings();
+        }
+    }
+
+    /*
+     * @hide
+     */
+    public NetworkTraffic(Context context) {
+        this(context, null);
+    }
+
+    /*
+     * @hide
+     */
+    public NetworkTraffic(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    /*
+     * @hide
+     */
+    public NetworkTraffic(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        final Resources resources = getResources();
+        txtSizeSingle = resources.getDimensionPixelSize(R.dimen.net_traffic_single_text_size);
+        txtSizeMulti = resources.getDimensionPixelSize(R.dimen.net_traffic_multi_text_size);
+        Handler mHandler = new Handler();
+        SettingsObserver settingsObserver = new SettingsObserver(mHandler);
+        settingsObserver.observe();
+        updateSettings();
+    }
+
+    @Override
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        if (!mAttached) {
+            mAttached = true;
+            IntentFilter filter = new IntentFilter();
+            filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
+            mContext.registerReceiver(mIntentReceiver, filter, null, getHandler());
+        }
+        updateSettings();
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        if (mAttached) {
+            mContext.unregisterReceiver(mIntentReceiver);
+            mAttached = false;
+        }
+    }
+
+    private final BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            String action = intent.getAction();
+            if (action != null && action.equals(ConnectivityManager.CONNECTIVITY_ACTION)) {
+                updateSettings();
+            }
+        }
+    };
+
+    private boolean getConnectAvailable() {
+        ConnectivityManager connManager =
+                (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
+        NetworkInfo network = (connManager != null) ? connManager.getActiveNetworkInfo() : null;
+        return network != null && network.isConnected();
+    }
+
+    public void updateSettings() {
+        ContentResolver resolver = mContext.getContentResolver();
+        mState = Settings.System.getIntForUser(resolver,
+                Settings.System.STATUS_BAR_NETWORK_TRAFFIC_STYLE, 3 , UserHandle.USER_CURRENT);
+        MB = KB * KB;
+        GB = MB * KB;
+
+        if (isSet(mState, MASK_UP) || isSet(mState, MASK_DOWN)) {
+            if (getConnectAvailable()) {
+                if (mAttached) {
+                    totalRxBytes = TrafficStats.getTotalRxBytes();
+                    lastUpdateTime = SystemClock.elapsedRealtime();
+                    mTrafficHandler.sendEmptyMessage(1);
+                }
+                setVisibility(View.VISIBLE);
+                return;            }
+        } else {
+            clearHandlerCallbacks();
+        }
+        setVisibility(View.GONE);
+    }
+
+    private static boolean isSet(int intState, int intMask) {
+        return (intState & intMask) == intMask;
+    }
+
+    private static int getInterval(int intState) {
+        int intInterval = intState >>> 16;
+        return (intInterval >= 250 && intInterval <= 32750) ? intInterval : 1000;
+    }
+
+    private void clearHandlerCallbacks() {
+        mTrafficHandler.removeCallbacks(mRunnable);
+        mTrafficHandler.removeMessages(0);
+        mTrafficHandler.removeMessages(1);
+    }
+}
--- /dev/null
+++ SystemUIExt/src/com/android/systemui/utils/NetworkTrafficSpan.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (C) 2015 The MoKee OpenSource Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.utils;
+
+import android.text.TextPaint;
+import android.text.style.MetricAffectingSpan;
+
+public class NetworkTrafficSpan extends MetricAffectingSpan {
+
+    double ratio = 0;
+
+    public NetworkTrafficSpan(double ratio) {
+        this.ratio = ratio;
+    }
+
+    @Override
+    public void updateDrawState(TextPaint paint) {
+        paint.baselineShift += (int) (paint.ascent() * ratio);
+    }
+
+    @Override
+    public void updateMeasureState(TextPaint paint) {
+        paint.baselineShift += (int) (paint.ascent() * ratio);
+    }
+
+}
